/*
This file is part of HOBAK.

Permission is hereby granted to use this software solely for non-commercial applications
and purposes including academic or industrial research, evaluation and not-for-profit media
production.
 
THIS SOFTWARE IS PROVIDED "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT
NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY, NONINFRINGEMENT, AND FITNESS
FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL PIXAR OR ITS AFFILIATES, YALE, OR
THE AUTHORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL 
DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*/
using namespace HOBAK;
using namespace std;

//////////////////////////////////////////////////////////////////////////////
// This was used to generate the unit test data for 
// unitTestSphereSDF, unitTestCubeSDF, unitTestCylinderSDF
//
// If the implementation ever changes, or it turns out there was a bug
// in the class, call this again to regenerate the test data
//
// SPHERE sphere(VECTOR3(0.25,0.25,0), 1.0);
// sphere.rotation() = Eigen::AngleAxisd(0.25, VECTOR3::UnitX()) * sphere.rotation();
// sphere.rotation() = Eigen::AngleAxisd(0.5, VECTOR3::UnitY()) * sphere.rotation();
// generateUnitTestKinematicSDF(&sphere);
//
// CUBE cube(VECTOR3(0.25,0,0), 1.0);
// cube.rotation() = Eigen::AngleAxisd(0.25, VECTOR3::UnitX()) * cube.rotation();
// cube.rotation() = Eigen::AngleAxisd(0.5, VECTOR3::UnitY()) * cube.rotation();
// generateUnitTestKinematicSDF(&cube);
//
// CYLINDER cylinder(VECTOR3(0,0.2,0), 0.5, 1.0);
// cylinder.rotation() = Eigen::AngleAxisd(0.25, VECTOR3::UnitX()) * cylinder.rotation();
// cylinder.rotation() = Eigen::AngleAxisd(0.5, VECTOR3::UnitY()) * cylinder.rotation();
// generateUnitTestKinematic(&cylinder);
//////////////////////////////////////////////////////////////////////////////
void generateUnitTestKinematicSDF(KINEMATIC_SHAPE* shape)
{
  std::mt19937 gen(456);
  std::uniform_real_distribution<REAL> dist(-1.0, 1.0);

  vector<VECTOR3> inputs;
  vector<REAL> outputs;
  for (int i = 0; i < 30; i++)
  {
    // make a random vector
    VECTOR3 v;
    v[0] = dist(gen);
    v[1] = dist(gen);
    v[2] = dist(gen);

    REAL distance = shape->signedDistance(v);

    inputs.push_back(v);
    outputs.push_back(distance);
  }

  cout.precision(16);
  cout << "  vector<VECTOR3> inputs(" << inputs.size() << ");" << endl;
  cout << "  vector<REAL> outputs(" << outputs.size() << ");" << endl;

  for (unsigned int i = 0; i < inputs.size(); i++)
    cout << "  inputs[" << i << "] = VECTOR3(" << inputs[i][0] << ", " << inputs[i][1] << ", " << inputs[i][2] << ");" << endl;
  
  for (unsigned int i = 0; i < outputs.size(); i++)
    cout << "  outputs[" << i << "] = " << outputs[i] << ";" << endl;
}

//////////////////////////////////////////////////////////////////////////////
// This tests whether the signed distance function call to CAPSULE is correct
//
// The data was auto-generated by calling generateUnitTestKinematicSDF from a
// known (well, AFAIK) correct implementation
//////////////////////////////////////////////////////////////////////////////
bool unitTestCapsuleSDF()
{
  vector<VECTOR3> inputs(30);
  vector<REAL> outputs(30);
  inputs[0] = VECTOR3(0.9609683031443301, -0.6969172539361441, -0.3306224421674184);
  inputs[1] = VECTOR3(-0.4296723088209874, -0.6906904603235291, -0.3758947934936203);
  inputs[2] = VECTOR3(-0.7572803283642503, 0.6353121831822757, -0.6708195427520642);
  inputs[3] = VECTOR3(-0.1439888588384868, -0.3371783134361359, 0.3549108367344702);
  inputs[4] = VECTOR3(0.4255438244788488, -0.8161769797345201, -0.9374651421389575);
  inputs[5] = VECTOR3(-0.1267627438209932, 0.1233245425717902, -0.6511963528368152);
  inputs[6] = VECTOR3(0.6386531045303403, 0.8409799545447671, -0.185927374669855);
  inputs[7] = VECTOR3(-0.6023583453529708, -0.8478474988403104, 0.03819402447351417);
  inputs[8] = VECTOR3(0.3743771563098153, -0.503703418119791, 0.2959228146554544);
  inputs[9] = VECTOR3(-0.8489414882580268, 0.6970877541230116, 0.8793227421746745);
  inputs[10] = VECTOR3(-0.1486107328843356, 0.6983140916438566, 0.7509043448876263);
  inputs[11] = VECTOR3(-0.7070806177641333, 0.9852825307447737, 0.949376982723918);
  inputs[12] = VECTOR3(-0.8667132941594925, -0.4906619430393133, 0.8222302130217225);
  inputs[13] = VECTOR3(-0.2114686417721885, -0.61604535693443, -0.203703260541712);
  inputs[14] = VECTOR3(-0.9830259908207014, 0.7052254103572226, -0.9177824458209636);
  inputs[15] = VECTOR3(0.9702047978501127, 0.5698370384250906, 0.534654019704736);
  inputs[16] = VECTOR3(0.7426859160730241, -0.3868034427074857, -0.9381356397592895);
  inputs[17] = VECTOR3(0.9519990708121457, 0.5631986819658477, 0.2313752505593341);
  inputs[18] = VECTOR3(0.8243988448843473, -0.8583684272117047, -0.5983983813943918);
  inputs[19] = VECTOR3(-0.2671481167463582, -0.5824802396933277, 0.8098987734491456);
  inputs[20] = VECTOR3(0.5956793509073903, 0.1054990441156285, 0.06277292144103042);
  inputs[21] = VECTOR3(0.5740632155316028, -0.3742904025735981, -0.2103182305177216);
  inputs[22] = VECTOR3(-0.02882450889864863, -0.5627495502877096, 0.292586053493334);
  inputs[23] = VECTOR3(0.7485791947917761, 0.1683701326201004, -0.8245428826621169);
  inputs[24] = VECTOR3(0.662501024414144, 0.3533348772155975, 0.4976929004219566);
  inputs[25] = VECTOR3(-0.4502917621173455, 0.5139263176290807, 0.7202137383362786);
  inputs[26] = VECTOR3(0.260473896852961, -0.09788151933168387, -0.03652497580364167);
  inputs[27] = VECTOR3(-0.9684273304959282, -0.1943196682351499, 0.9908122116519673);
  inputs[28] = VECTOR3(-0.3962615220384622, -0.009674232668570704, 0.9956173830097235);
  inputs[29] = VECTOR3(-0.7538700188788676, -0.8946894800162145, -0.7310162438623217);
  outputs[0] = 0.622673524717434;
  outputs[1] = 0.1112823715268128;
  outputs[2] = 0.5854756922122577;
  outputs[3] = -0.02756523962591179;
  outputs[4] = 0.5976757761069538;
  outputs[5] = 0.1267183803940864;
  outputs[6] = 0.1684795641493222;
  outputs[7] = 0.2961482756271447;
  outputs[8] = 0.1322623006711786;
  outputs[9] = 0.6912808489848616;
  outputs[10] = 0.1752994072602787;
  outputs[11] = 0.6767838100160271;
  outputs[12] = 0.7493180236156309;
  outputs[13] = -0.1229623987803842;
  outputs[14] = 0.9261001571406446;
  outputs[15] = 0.5121420846818254;
  outputs[16] = 0.658388410104815;
  outputs[17] = 0.4092240711850019;
  outputs[18] = 0.6620035286759269;
  outputs[19] = 0.4877149612189612;
  outputs[20] = 0.1063429464715244;
  outputs[21] = 0.1477511911121288;
  outputs[22] = -0.0108237427403759;
  outputs[23] = 0.6075335315011583;
  outputs[24] = 0.2731456301039143;
  outputs[25] = 0.308867673066443;
  outputs[26] = -0.2044649047458316;
  outputs[27] = 0.9126690950631295;
  outputs[28] = 0.5913684236792036;
  outputs[29] = 0.6145659998741801;
 
  CAPSULE capsule(VECTOR3(0,0.2,0), 0.5, 1.0);
  capsule.rotation() = Eigen::AngleAxisd(0.25, VECTOR3::UnitX()) * capsule.rotation();
  capsule.rotation() = Eigen::AngleAxisd(0.5, VECTOR3::UnitY()) * capsule.rotation();

  cout << "============================================= " << endl;
  cout << " VERIFYING SDF for CAPSULE is working " << endl;
  cout << "============================================= " << endl;
  bool passed = true;
  for (unsigned int x = 0; x < inputs.size(); x++)
  {
    // call the current implementation
    REAL signedDistance = capsule.signedDistance(inputs[x]);

    // does it match?
    REAL diff = fabs(signedDistance - outputs[x]);
    if (diff > 1e-8)
    {
      cout << "  TEST FAILED on input: " << inputs[x].transpose() << endl;
      cout << "    Should be: " << outputs[x] << endl;
      cout << "    Got:       " << signedDistance << endl;
      cout << "    Diff:      " << diff << endl;
      passed = false;
    }
  }
  if (passed)
    cout << " TESTS PASSED." << endl;

  return passed;
}

//////////////////////////////////////////////////////////////////////////////
// This tests whether the signed distance function call to CYLINDER is correct
//
// The data was auto-generated by calling generateUnitTestKinematicSDF from a
// known (well, AFAIK) correct implementation
//////////////////////////////////////////////////////////////////////////////
bool unitTestCylinderSDF()
{
  vector<VECTOR3> inputs(30);
  vector<REAL> outputs(30);
  inputs[0] = VECTOR3(0.9609683031443301, -0.6969172539361441, -0.3306224421674184);
  inputs[1] = VECTOR3(-0.4296723088209874, -0.6906904603235291, -0.3758947934936203);
  inputs[2] = VECTOR3(-0.7572803283642503, 0.6353121831822757, -0.6708195427520642);
  inputs[3] = VECTOR3(-0.1439888588384868, -0.3371783134361359, 0.3549108367344702);
  inputs[4] = VECTOR3(0.4255438244788488, -0.8161769797345201, -0.9374651421389575);
  inputs[5] = VECTOR3(-0.1267627438209932, 0.1233245425717902, -0.6511963528368152);
  inputs[6] = VECTOR3(0.6386531045303403, 0.8409799545447671, -0.185927374669855);
  inputs[7] = VECTOR3(-0.6023583453529708, -0.8478474988403104, 0.03819402447351417);
  inputs[8] = VECTOR3(0.3743771563098153, -0.503703418119791, 0.2959228146554544);
  inputs[9] = VECTOR3(-0.8489414882580268, 0.6970877541230116, 0.8793227421746745);
  inputs[10] = VECTOR3(-0.1486107328843356, 0.6983140916438566, 0.7509043448876263);
  inputs[11] = VECTOR3(-0.7070806177641333, 0.9852825307447737, 0.949376982723918);
  inputs[12] = VECTOR3(-0.8667132941594925, -0.4906619430393133, 0.8222302130217225);
  inputs[13] = VECTOR3(-0.2114686417721885, -0.61604535693443, -0.203703260541712);
  inputs[14] = VECTOR3(-0.9830259908207014, 0.7052254103572226, -0.9177824458209636);
  inputs[15] = VECTOR3(0.9702047978501127, 0.5698370384250906, 0.534654019704736);
  inputs[16] = VECTOR3(0.7426859160730241, -0.3868034427074857, -0.9381356397592895);
  inputs[17] = VECTOR3(0.9519990708121457, 0.5631986819658477, 0.2313752505593341);
  inputs[18] = VECTOR3(0.8243988448843473, -0.8583684272117047, -0.5983983813943918);
  inputs[19] = VECTOR3(-0.2671481167463582, -0.5824802396933277, 0.8098987734491456);
  inputs[20] = VECTOR3(0.5956793509073903, 0.1054990441156285, 0.06277292144103042);
  inputs[21] = VECTOR3(0.5740632155316028, -0.3742904025735981, -0.2103182305177216);
  inputs[22] = VECTOR3(-0.02882450889864863, -0.5627495502877096, 0.292586053493334);
  inputs[23] = VECTOR3(0.7485791947917761, 0.1683701326201004, -0.8245428826621169);
  inputs[24] = VECTOR3(0.662501024414144, 0.3533348772155975, 0.4976929004219566);
  inputs[25] = VECTOR3(-0.4502917621173455, 0.5139263176290807, 0.7202137383362786);
  inputs[26] = VECTOR3(0.260473896852961, -0.09788151933168387, -0.03652497580364167);
  inputs[27] = VECTOR3(-0.9684273304959282, -0.1943196682351499, 0.9908122116519673);
  inputs[28] = VECTOR3(-0.3962615220384622, -0.009674232668570704, 0.9956173830097235);
  inputs[29] = VECTOR3(-0.7538700188788676, -0.8946894800162145, -0.7310162438623217);
  outputs[0] = 0.6605680778468075;
  outputs[1] = 0.4955785471150651;
  outputs[2] = 0.5854756922122577;
  outputs[3] = -0.02756523962591179;
  outputs[4] = 0.7492797861051325;
  outputs[5] = 0.1267183803940864;
  outputs[6] = 0.21667428121785;
  outputs[7] = 0.5803378768845926;
  outputs[8] = 0.1474504650255933;
  outputs[9] = 0.6928479778634989;
  outputs[10] = 0.2074035323620973;
  outputs[11] = 0.722600062368423;
  outputs[12] = 0.7516509731115834;
  outputs[13] = 0.3599866766490978;
  outputs[14] = 0.9261001571406446;
  outputs[15] = 0.5159984184427553;
  outputs[16] = 0.669482693997525;
  outputs[17] = 0.4093764763012999;
  outputs[18] = 0.762087746479241;
  outputs[19] = 0.4944356388160354;
  outputs[20] = 0.1063429464715244;
  outputs[21] = 0.1507444319996655;
  outputs[22] = 0.1789309168096216;
  outputs[23] = 0.6075335315011583;
  outputs[24] = 0.2731456301039143;
  outputs[25] = 0.308867673066443;
  outputs[26] = -0.2044649047458316;
  outputs[27] = 0.9126690950631295;
  outputs[28] = 0.5913684236792036;
  outputs[29] = 0.8516881253736226;

  CYLINDER cylinder(VECTOR3(0,0.2,0), 0.5, 1.0);
  cylinder.rotation() = Eigen::AngleAxisd(0.25, VECTOR3::UnitX()) * cylinder.rotation();
  cylinder.rotation() = Eigen::AngleAxisd(0.5, VECTOR3::UnitY()) * cylinder.rotation();

  cout << "============================================= " << endl;
  cout << " VERIFYING SDF for CYLINDER is working " << endl;
  cout << "============================================= " << endl;
  bool passed = true;
  for (unsigned int x = 0; x < inputs.size(); x++)
  {
    // call the current implementation
    REAL signedDistance = cylinder.signedDistance(inputs[x]);

    // does it match?
    REAL diff = fabs(signedDistance - outputs[x]);
    if (diff > 1e-8)
    {
      cout << "  TEST FAILED on input: " << inputs[x].transpose() << endl;
      cout << "    Should be: " << outputs[x] << endl;
      cout << "    Got:       " << signedDistance << endl;
      cout << "    Diff:      " << diff << endl;
      passed = false;
    }
  }
  if (passed)
    cout << " TESTS PASSED." << endl;

  return passed;
}

//////////////////////////////////////////////////////////////////////////////
// This tests whether the signed distance function call to SPHERE is correct
//
// The data was auto-generated by calling generateUnitTestKinematicSDF from a
// known (well, AFAIK) correct implementation
//////////////////////////////////////////////////////////////////////////////
bool unitTestSphereSDF()
{
  vector<VECTOR3> inputs(30);
  vector<REAL> outputs(30);
  inputs[0] = VECTOR3(0.9609683031443301, -0.6969172539361441, -0.3306224421674184);
  inputs[1] = VECTOR3(-0.4296723088209874, -0.6906904603235291, -0.3758947934936203);
  inputs[2] = VECTOR3(-0.7572803283642503, 0.6353121831822757, -0.6708195427520642);
  inputs[3] = VECTOR3(-0.1439888588384868, -0.3371783134361359, 0.3549108367344702);
  inputs[4] = VECTOR3(0.4255438244788488, -0.8161769797345201, -0.9374651421389575);
  inputs[5] = VECTOR3(-0.1267627438209932, 0.1233245425717902, -0.6511963528368152);
  inputs[6] = VECTOR3(0.6386531045303403, 0.8409799545447671, -0.185927374669855);
  inputs[7] = VECTOR3(-0.6023583453529708, -0.8478474988403104, 0.03819402447351417);
  inputs[8] = VECTOR3(0.3743771563098153, -0.503703418119791, 0.2959228146554544);
  inputs[9] = VECTOR3(-0.8489414882580268, 0.6970877541230116, 0.8793227421746745);
  inputs[10] = VECTOR3(-0.1486107328843356, 0.6983140916438566, 0.7509043448876263);
  inputs[11] = VECTOR3(-0.7070806177641333, 0.9852825307447737, 0.949376982723918);
  inputs[12] = VECTOR3(-0.8667132941594925, -0.4906619430393133, 0.8222302130217225);
  inputs[13] = VECTOR3(-0.2114686417721885, -0.61604535693443, -0.203703260541712);
  inputs[14] = VECTOR3(-0.9830259908207014, 0.7052254103572226, -0.9177824458209636);
  inputs[15] = VECTOR3(0.9702047978501127, 0.5698370384250906, 0.534654019704736);
  inputs[16] = VECTOR3(0.7426859160730241, -0.3868034427074857, -0.9381356397592895);
  inputs[17] = VECTOR3(0.9519990708121457, 0.5631986819658477, 0.2313752505593341);
  inputs[18] = VECTOR3(0.8243988448843473, -0.8583684272117047, -0.5983983813943918);
  inputs[19] = VECTOR3(-0.2671481167463582, -0.5824802396933277, 0.8098987734491456);
  inputs[20] = VECTOR3(0.5956793509073903, 0.1054990441156285, 0.06277292144103042);
  inputs[21] = VECTOR3(0.5740632155316028, -0.3742904025735981, -0.2103182305177216);
  inputs[22] = VECTOR3(-0.02882450889864863, -0.5627495502877096, 0.292586053493334);
  inputs[23] = VECTOR3(0.7485791947917761, 0.1683701326201004, -0.8245428826621169);
  inputs[24] = VECTOR3(0.662501024414144, 0.3533348772155975, 0.4976929004219566);
  inputs[25] = VECTOR3(-0.4502917621173455, 0.5139263176290807, 0.7202137383362786);
  inputs[26] = VECTOR3(0.260473896852961, -0.09788151933168387, -0.03652497580364167);
  inputs[27] = VECTOR3(-0.9684273304959282, -0.1943196682351499, 0.9908122116519673);
  inputs[28] = VECTOR3(-0.3962615220384622, -0.009674232668570704, 0.9956173830097235);
  inputs[29] = VECTOR3(-0.7538700188788676, -0.8946894800162145, -0.7310162438623217);
  outputs[0] = 0.2294061221348478;
  outputs[1] = 0.219897489667618;
  outputs[2] = 0.2700700757660468;
  outputs[3] = -0.2088190506021268;
  outputs[4] = 0.4305208419153146;
  outputs[5] = -0.2370756743987387;
  outputs[6] = -0.2686467809693928;
  outputs[7] = 0.390410969141233;
  outputs[8] = -0.1807876760382696;
  outputs[9] = 0.4767424756561702;
  outputs[10] = -0.03888950879300124;
  outputs[11] = 0.5355651611846972;
  outputs[12] = 0.5721613207381309;
  outputs[13] = 0.002238936562573013;
  outputs[14] = 0.6030932244044274;
  outputs[15] = -0.0477155872422953;
  outputs[16] = 0.2362671698008454;
  outputs[17] = -0.1972356408150305;
  outputs[18] = 0.3843753921171991;
  outputs[19] = 0.2713778145652046;
  outputs[20] = -0.6201116222342495;
  outputs[21] = -0.2658411394702828;
  outputs[22] = -0.09230427071939429;
  outputs[23] = -0.0329862389415394;
  outputs[24] = -0.3453753631871922;
  outputs[25] = 0.03864020821215131;
  outputs[26] = -0.6500495351263784;
  outputs[27] = 0.6320827080876417;
  outputs[28] = 0.2150467626106458;
  outputs[29] = 0.6889208889862861;

  SPHERE sphere(VECTOR3(0.25,0.25,0), 1.0);
  sphere.rotation() = Eigen::AngleAxisd(0.25, VECTOR3::UnitX()) * sphere.rotation();
  sphere.rotation() = Eigen::AngleAxisd(0.5, VECTOR3::UnitY()) * sphere.rotation();

  cout << "============================================= " << endl;
  cout << " VERIFYING SDF for SPHERE is working " << endl;
  cout << "============================================= " << endl;
  bool passed = true;
  for (unsigned int x = 0; x < inputs.size(); x++)
  {
    // call the current implementation
    REAL signedDistance = sphere.signedDistance(inputs[x]);

    // does it match?
    REAL diff = fabs(signedDistance - outputs[x]);
    if (diff > 1e-8)
    {
      cout << "  TEST FAILED on input: " << inputs[x].transpose() << endl;
      cout << "    Should be: " << outputs[x] << endl;
      cout << "    Got:       " << signedDistance << endl;
      cout << "    Diff:      " << diff << endl;
      passed = false;
    }
  }
  if (passed)
    cout << " TESTS PASSED." << endl;

  return passed;
}

//////////////////////////////////////////////////////////////////////////////
// This tests whether the signed distance function call to CUBE is correct
//
// The data was auto-generated by calling generateUnitTestKinematicSDF from a
// known (well, AFAIK) correct implementation
//////////////////////////////////////////////////////////////////////////////
bool unitTestCubeSDF()
{
  vector<VECTOR3> inputs(30);
  vector<REAL> outputs(30);
  inputs[0] = VECTOR3(0.9609683031443301, -0.6969172539361441, -0.3306224421674184);
  inputs[1] = VECTOR3(-0.4296723088209874, -0.6906904603235291, -0.3758947934936203);
  inputs[2] = VECTOR3(-0.7572803283642503, 0.6353121831822757, -0.6708195427520642);
  inputs[3] = VECTOR3(-0.1439888588384868, -0.3371783134361359, 0.3549108367344702);
  inputs[4] = VECTOR3(0.4255438244788488, -0.8161769797345201, -0.9374651421389575);
  inputs[5] = VECTOR3(-0.1267627438209932, 0.1233245425717902, -0.6511963528368152);
  inputs[6] = VECTOR3(0.6386531045303403, 0.8409799545447671, -0.185927374669855);
  inputs[7] = VECTOR3(-0.6023583453529708, -0.8478474988403104, 0.03819402447351417);
  inputs[8] = VECTOR3(0.3743771563098153, -0.503703418119791, 0.2959228146554544);
  inputs[9] = VECTOR3(-0.8489414882580268, 0.6970877541230116, 0.8793227421746745);
  inputs[10] = VECTOR3(-0.1486107328843356, 0.6983140916438566, 0.7509043448876263);
  inputs[11] = VECTOR3(-0.7070806177641333, 0.9852825307447737, 0.949376982723918);
  inputs[12] = VECTOR3(-0.8667132941594925, -0.4906619430393133, 0.8222302130217225);
  inputs[13] = VECTOR3(-0.2114686417721885, -0.61604535693443, -0.203703260541712);
  inputs[14] = VECTOR3(-0.9830259908207014, 0.7052254103572226, -0.9177824458209636);
  inputs[15] = VECTOR3(0.9702047978501127, 0.5698370384250906, 0.534654019704736);
  inputs[16] = VECTOR3(0.7426859160730241, -0.3868034427074857, -0.9381356397592895);
  inputs[17] = VECTOR3(0.9519990708121457, 0.5631986819658477, 0.2313752505593341);
  inputs[18] = VECTOR3(0.8243988448843473, -0.8583684272117047, -0.5983983813943918);
  inputs[19] = VECTOR3(-0.2671481167463582, -0.5824802396933277, 0.8098987734491456);
  inputs[20] = VECTOR3(0.5956793509073903, 0.1054990441156285, 0.06277292144103042);
  inputs[21] = VECTOR3(0.5740632155316028, -0.3742904025735981, -0.2103182305177216);
  inputs[22] = VECTOR3(-0.02882450889864863, -0.5627495502877096, 0.292586053493334);
  inputs[23] = VECTOR3(0.7485791947917761, 0.1683701326201004, -0.8245428826621169);
  inputs[24] = VECTOR3(0.662501024414144, 0.3533348772155975, 0.4976929004219566);
  inputs[25] = VECTOR3(-0.4502917621173455, 0.5139263176290807, 0.7202137383362786);
  inputs[26] = VECTOR3(0.260473896852961, -0.09788151933168387, -0.03652497580364167);
  inputs[27] = VECTOR3(-0.9684273304959282, -0.1943196682351499, 0.9908122116519673);
  inputs[28] = VECTOR3(-0.3962615220384622, -0.009674232668570704, 0.9956173830097235);
  inputs[29] = VECTOR3(-0.7538700188788676, -0.8946894800162145, -0.7310162438623217);
  outputs[0] = 0.3259555224021056;
  outputs[1] = 0.3314490068775392;
  outputs[2] = 0.6982707386929521;
  outputs[3] = 0.01591107115363544;
  outputs[4] = 0.4848938776841792;
  outputs[5] = 0.2592380011556275;
  outputs[6] = 0.3205666912583365;
  outputs[7] = 0.4925156350413216;
  outputs[8] = -0.06598257405184166;
  outputs[9] = 0.9168712197550649;
  outputs[10] = 0.3598571388978479;
  outputs[11] = 0.9652107606136735;
  outputs[12] = 0.8742062763201128;
  outputs[13] = 0.1958571364115719;
  outputs[14] = 1.037408074062811;
  outputs[15] = 0.2937472599003348;
  outputs[16] = 0.3826631185110804;
  outputs[17] = 0.1792647074368134;
  outputs[18] = 0.4893739701390057;
  outputs[19] = 0.3544205024155845;
  outputs[20] = -0.2267327713097166;
  outputs[21] = -0.1147758421551024;
  outputs[22] = 0.01480137657209557;
  outputs[23] = 0.3330384963999726;
  outputs[24] = 0.02738768353361221;
  outputs[25] = 0.4653409078939685;
  outputs[26] = -0.3984734997797838;
  outputs[27] = 1.044291256400731;
  outputs[28] = 0.5466516932515666;
  outputs[29] = 0.7422144090013634;
 
  CUBE cube(VECTOR3(0.25,0,0), 1.0);
  cube.rotation() = Eigen::AngleAxisd(0.25, VECTOR3::UnitX()) * cube.rotation();
  cube.rotation() = Eigen::AngleAxisd(0.5, VECTOR3::UnitY()) * cube.rotation();

  cout << "=============================================================== " << endl;
  cout << " VERIFYING SDF for CUBE is working " << endl;
  cout << "=============================================================== " << endl;
  bool passed = true;
  for (unsigned int x = 0; x < inputs.size(); x++)
  {
    // call the current implementation
    REAL signedDistance = cube.signedDistance(inputs[x]);

    // does it match?
    REAL diff = fabs(signedDistance - outputs[x]);
    if (diff > 1e-8)
    {
      cout << "  TEST FAILED on input: " << inputs[x].transpose() << endl;
      cout << "    Should be: " << outputs[x] << endl;
      cout << "    Got:       " << signedDistance << endl;
      cout << "    Diff:      " << diff << endl;
      passed = false;
    }
  }
  if (passed)
    cout << " TESTS PASSED." << endl;

  return passed;
}

//////////////////////////////////////////////////////////////////////////////
// test out geometry primitives
//////////////////////////////////////////////////////////////////////////////
TEST_CASE("Geometric tests", "[geometric]" )
{
  // test out the signed distance function in CUBE
  REQUIRE(unitTestCubeSDF());

  // test out the signed distance function in SPHERE
  REQUIRE(unitTestSphereSDF());
  
  // test out the signed distance function in CYLINDER
  REQUIRE(unitTestCylinderSDF());

  // test out the signed distance function in CAPSULE
  REQUIRE(unitTestCapsuleSDF());

  // test out the fast convolution in FIELD_3D
  REQUIRE(unitTestFastConvolution());
}
